ПОЛЕЗНЫЕ ЗАМЕТКИ К ПОЭТАПНЫМ СНИМКАМ (COMMITS) ДАННОГО САЙТА

Цель сайта: Применение Django к макету сайта-блога 

7 сентября
Снимок (commit): В шаблон post.html добавлены существующие комментарии и добавлена форма
для внесения новых комментариев.

Сравнительно сложный и запутанный этап. Задейстованы файлы:

1. models.py (класс - "Comment", c атрибутами - к какому посту комментарий, кто автор, когда
   сделан комментарий; функция модели возвращает имя автора комментария). Интересно также, 
   что models.py, но в другом классе файла - "Post", возвращающего 
   название индивидуального поста, а также дающего "get_absolute_url" ссылку на его 
   представление, появилась функция "get_comments" (через декоратор "@property"), которая 
   "достаёт" все комментарии данного индивидуального поста из базы данных и сортирует их в 
   обратном хронологическом порядке;

2. Не забудьте сделать миграцию и внести в БД тестовые комментарии через админ-сайт;

3. В файле "forms.py" создаётся класс новой формы "CommentForm", в которая наследует класс 
   "Comment" модели. В этой новой форме определяются атрибуты, главным из которых, является 
   "content" - текст нового комментария на странице detail-page: 

4. В представлении (views.py) в метод "рost" загружается форма "CommentForm" и определяется  
   Затем, метод "рost" добавляются новые переменные:

5. Много работы также и в файле post.html.
-----------------------------------------------------------------------------------
7 сентября
Снимок (commit): В post.html добавлен динамический 'sidebar.html' 

До настоящего времени боковая колонка, выделенная в отдельный файл (sidebar.html), 
демонстрировалась без "свежих постов" (latest posts) и (categories). Места, где
они должны были находиться оставались пустыми. В тоже время, часть боковой
колонки, "ответственная" за поиск по словам заголовка и краткого содержания (Search
the blog" работала без проблем.

Дело в том, что "поиск" ведётся через самостоятельную функцию в файле представления
и собственный шаблон: "def search()" и "search.html", соответственно. В тоже время,
функция файла представления "def post()" не содержит переменные (latest posts) и 
(categories), которые, поэтому и не могут быть представлены на странице "post.html".

Выход один - нужно добавить эти переменные и контекст в функцию "def post()" файлах
представления по аналогии с тем, как это было сделано в функции "def blog()" !
------------------------------------------------------------------------------------
6 сентября
Снимок (commit): В post.html добавлены динамические ссылки на предыдущий/последующий посты

Предыдущий/последующий пост может быть выбран в соответствии с несколькими приниципами:
  - создать queryset - например, выбрать одну категорию или, допустим, тэг;
  - просто установить предыдущий и последующий на основе даты создания;
  - создать в модели атрибут предыдущий/последующий пост и выбирать для каждого поста
    таковой в индивидуальном порядке 
В данной работе выбран третий вариант, как самый простой и надёжный.

--------------------------------------------------------------------------------------
6 сентября
Снимок (commit): Представление результатов поиска (search_results.html) в более расширенном виде. 
Подключение редактора текста - tinyMCE - к админ-сайту. Создание нового поста (post/4), 
включая содержание, и динамическое оформление страницы поста (без ссылок на предыдущий и 
последующие посты, без работающих комментариев и без работающей боковой колонки, кроме поиска).

Оставил часть дизайнерского оформления текста поста, с изменением шрифта, картинки и цитаты
для возможного дальнейшего использования.

Задействованные файлы: 
  - search_results.html (новый)
  - blog/settings.py
  - posts/models.py
  - posts/views.py
  - blog/urls.py 
  - forms.py
  - head.html
  - post.html
  - scripts.html
  - github.css (новый)
  - highlight.pack.js (новый)
  

-----------------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "Поиск" (Search)

Осуществляется поиск по словам или тексту, имеющимся в названии или
в кратком содержании (overview) поста. Поиска по категориям и тем более
по этикеткам не проводится. В будущем нужно будет попробовать сделать 
возможность представлять найденные посты в виде списка как в post-list.
(Важно! Добавлено 5 сентября: скорее всего для демонстрации результатов поиска
можно применить для шаблона search.html содержание существующиего шаблона 
blog.html. При этом попробовать использовать собственный side-bar, чтобы 
в нём также могли отразиться результаты поиска.)

Для реализации поиска использован новый шаблон - search.html, а также ещё 
три файла были модифицированы - "views.py", "urls.py" и "sidebar.html".

Важно! Добавлено 5 сентября: Для полноценного поиска в существующем блоге необходимо
правильно использовать краткое содержание поста - в нём должен быть фрагмент,
перечисляющий важные составляющие поста, например: site-type: blog; rich-text editor: tinyMCE; 
view: class-based view; search function: overview end title; и т.п.
-----------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "категории" (Categories)

На боковой колонке (side-bar) демонстрируются индивидуальные категории, 
которые используются в данном блоге, а также количество постов, в 
которых каждая категория была задействована. Ожидается, что возможно 
выведение всех постов с одинаковыми категориями в один post-list, тогда
эта информация станет не просто интересной, но и полезной. 

При добавлении данного функционала были сделаны изменения в двух файлах:
  - в файле-представлении (views.py);
  - в шаблоне, в данном случае в боковой колонке (sidebar.html)

Автор видео не стал делать динамичной информацию по этикеткам (tags), что 
могло бы быть желательным для быстрого поиска нужного поста, однако, надеюсь, 
это будет несложно сделать по аналогии с категориями. Нужно только 
предусмотреть наличие поиска всех постов по этикетке с выводом их в список 
(post_list). Для этой работы можно попробовать использовать ответвление в 
git контроле версий...

--------------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "Последние посты" (Latest Posts)

На боковой колонке (side-bar) демонстрируются последние посты из БД - картинка,
название поста, а также количество просмотров и комментариев. Здесь же 
работают ссылки на индивидуальные посты, с переходом на соответствующую 
страницу (post-detail/<?>), на которой пока остаётся исходная (generic) 
дизайнерская картинка, с жёстко запрограммированными (hard-coded) названием 
и текстом.
---------------------------------------------------------------------------
3 сентября
Снимок (commit): Разбивка списка постов на страницы. 

Для разбивки шаблона на страницы использован дефолтный постраничник (paginator)
Django. Он достаточно прост, требует модификации двух файлов - views.py и
blog.html. В будущем возможно попробовать постраничник от Corey Schafer на 
этом материале.

-----------------------------------------------------------------------------
3 сентября
Снимок (commit): Оформление фрагмента стр. blog.html. Список авторских постов. 
                 Описание в ReadMe.txt 


-----------------------------------------------------------------------------

2 сентября 2021
Снимок (commit): Latest Posts Added to Home Page
Заметки к предыдущим снимкам (commits):

    Чтобы использовать Django для разработки динамического backend'а готового
    дизайнерского макета требуется:

    1. Уметь разбираться в том, какой функционал предусмотрен дизайнером для 
       данного сайта:
        - какие модели необходимо иметь для представления каждой страницы сайта;
          например:
            - для представления шаблона index.html данный сайт использует три модели,
              (из которых две вспомогательные):
                - Author (наследует модель User, существующую в Django по умолчанию);
                - Category;
                - Post;
              а также ещё одну модель "Signup", которая находится в файле другого
              приложения - "Marketing" и служит определённой цели - сбору почты читателя;
            - для представления шаблона blog.html данный сайт использует только три
              модели, без "Signup", однако использует другую функцию представления
              для этого шаблона, с другими переменными и словарём;
        - какие атрибуты (переменные) определить в модели и какие им придать характеристики (Fileds);
        - какие особенности для представления атрибутов модели использованы дизайнером,
          например: 
            если дизайнер предусмотрел, что у каждого поста может быть несколько категорий,
            а у каждой категории может быть несколько постов, то, нужно не только 
            использовать в данном случае атрибут: 
                        categories = models.ManyToManyField(Category) 
            но и понимать, что это как-то должно реализоваться в шаблоне:
                        {% for cat in obj.categories.all %} (index.html);
                        или
                        {% for cat in post.categories.all %} (blog.html)
            или, возможно, и в файле-представлении, как в случае с функцией blog:

                        def blog(request):
                            post_list = Post.objects.all()
                            context = {
                            'post_list': post_list
                        }
                        return render(request, 'blog.html', context)

            которая определяет запрос ко всем объектам Post в переменной post_list
       
       Большим "подспорьем" здесь будет анализ готовых сайтов, работающих на логике 
       Django. 
    
    2. Хорошо понимать каким образом взаимодействуют между собой такие файлы Django как:
        - конкретная модель или несколько моделей в файле models.py;
        - конкретная функция представления шаблона в файле views.py;
        - каждый тэг (DTL-tag) шаблонного языка Django в конкретном шаблоне;
 
