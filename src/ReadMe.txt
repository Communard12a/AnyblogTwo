ПОЛЕЗНЫЕ ЗАМЕТКИ К ПОЭТАПНЫМ СНИМКАМ (COMMITS) ДАННОГО САЙТА

Цель сайта: Применение Django к макету сайта-блога 

14 октября 2021

Снимок (commit): "Новые Комментарии и Счётчик количества комментариев" 
индивидуального поста. Сделана новая модель - зарегистрирована в 
админсайте, сделана новая форма, изменены "представление" и шаблон.
Теперь комментарии могут оставлять незарегистрированные пользователи.
Указанные выше изменения сделаны по двум образцам - видео от Zander'a 
https://www.youtube.com/watch?v=pNVgLDKrK40&t=326s и книга А.Меле,
'Django 3 by Example'. Сделана также график-схема в Excel на локальном
компьютере: "Approaches to Comments".
Работа счётчика протестирована и на комментариях и на самом посте.
Раздел комментариев приведен в приличное рабочее состояние.

Сделал подсчёт количества комментов в самом посте (не в комментариях). 
Использовал такой-же подход как и в комментариях, а именно,
создание новой переменной с помощью Django ORM, которая действует 
временно, в так называемом контент-блоке. Переменной присваивается 
значение, полученное через QuerySet по запросу типа - comments.count():

    {% with comments.count as total_comments %}       
    <div class="comments meta-last"><i class="icon-comment"></i>{{ total_comments }}</div>
    {% endwith %}

Вопрос о подсчёте количества просмотров остаётся открытым...

13 октября 2021

Подработал excel "шпаргалку", где сравниваю подходы по организации 
комментариев на сайте - имя файла 'Approaches to comments'.

Теперь чуть-чуть "повозимся" с оформлением:

Результат: Внешний вид восстановил. Теперь работают только новые 
комментарии - без регистрации. При этом, однако, в административном 
сайте собирается инфа об электронке комментатора. 

Однако можно восстановить старый вариант и тогда появятся 
существующие на сегодня старые комментарии (только если сильно нужно по
какой-то непонятной причине - Если возвращать старый вариант, то нужно
делать регистрацию в нормальном режиме, а не с "кандачка" как 'JD')

Добавить в админсайте название поста? - Добавил: сейчас имя и название 
поста отображаются в админсайте!

Делаем коммит? С комментариями пока всё - комментарии отображаются и 
считаются в разделе комментариев, но не считается их количество в 
самом посту!!!



12 октября 2021

Продолжение работы над переделкой "комментов"

Ура! Не надо было ничего мудрить в post.html. То, что есть у Zander'a
работает! Комментарии работают на загрузку и на демонстрацию - причём
существующие комментарии сделанные ранее демонстрируются! Для 
новых уже нет формы - форма в post.html уже для новой модели!  
Нужно было только внести изменения в views.py - в def post():

         comments = post.new_comments.filter()
вместо:
         comments = post.comments.filter(status=True)    

поскольку у меня в модели 'NewComment', 'related_name' для "комментов" к данному 
посту - 'new_comments', а не 'comment'. 

Всё сложилось, но пока не в том "bootstrapious" стиле как задумано!

Пока по этой теме на сегодня всё!

11 октября 2021

Продолжение работы над пределкой "комментов".

1. Изменил внешний вид формы для заполнения комментарием - к моему
удивлению форма появилась. Заменил только название переменной с "form"
на "comment_form". Все ранее существовавшие комментарии остаются 
не задействованными - почему? Работу формы проверил - возникает ошибка
- OperationalError at /post/5/ - 'no such table: post_newcomment'

2. При выходе из админсайта исчезает форма - нужно удалять условие
if authenticafted... в файле post.html - Удаляем! Форма появилась!

3. Ну, что-же нужно сохранить модель NewComment - Делаем!
Сделал миграцию модели NewComment - Идём дальше! Делаем регистрацию 
модели в файле admin.py. Проверяем работу формы снова! - Форма 
обнулилась! Заходим в админсайт - наш комментарий сидит в новой
разделе - Newcomments!

4. Ищем причину, почему не отображаются новые сделанные комменты на странице: 
(и почему есть только старые комменты - они должны улететь и демонстрироваться 
только новые)
В "forms.py" - тут всё нормально; значит - views.py ! Смотрим! Всё вроде ОК.
Возвращаемся к разделу post.html, который отвечает за демонстрацию постов на 
странице. Здесь должно быть отображение одного из двух вариантов или новые или 
старые посты! Сравниваем!
(Поправка: Не удаляем раздел демонстрирующий имеющиеся комментарии в post.html 
и не заменяем его на новый из Zander'а - пытаемся изменить существующий код,
в который вставить всё необходимое из модели.) 
Сложно! может быть куском всё-таки! И потом разобрать по кускам...?


10 октября 2021

Решил сделать параллельный вариант модели комментариев - NewComment. 
Само собой разумеется, параллельно нужно будет модель регистрировать в 
админсайте, делать отдельную форму и отдельно обрабатывать в файле views. 
Надеюсь, что они смогут существовать параллельно.

Промежуточный результат:
- сделал новую модель (ещё не сохранял в БД) для комментариев; старая 
  модель пока остаётся рабочей; существует две модели - одна рабочая; 
- сделал новую форму по Зандеру; старая форма остаётся рабочей, так как
  новая модель не зарегистрирована и новой форме не на чем базироваться.
- сделал изменения в файле "views.py"
    - сделал наследование новой формы и, соответственно, новых полей 
      в контексте, что привело к исчезновению показа полей из старой
      формы комментов, не говоря уже о "бутстраповском" оформлении через widgets;
- начал вносить изменения в post.html:
    - пока только внёс изменения в "Общее количество (сумма) комментариев 
      у данного поста". В результате на странице Blog все счётчики коммен-
      тариев обнулились.

В планах закончить изменения в post.html, затем попробовать запустить новую
модель в работу. Пока всё...
  

9 октября 2021

Планирую переделать раздел по комментариям. Сделать возможным, чтобы 
комментарий можно было оставить, не регистрируясь на сайте. Другими словами,
раздел "внести комментарий" на данный момент отображается и работает только 
когда пользователь есть на админсайте и в БД. К тому же авторизация на 
сайте не предусмотрена. Получается тупик - пользователь не может оставить
свой комментарий. Выхода два:

 - или сделать возможным регистрацию пользователя (как у CoreySchafer) 
 - или сделать возможным оставлять просто своё имя в загловке комментария

Есть ещё один важный момент, который необходимо 
предусмотреть: количество просмотров поста считается по количеству 
зарегистрированных пользователей, которые зашли на страницу поста. Для 
того, чтобы переделать этот счётчик нужно найти другой алгоритм подсчёта.


23 сентября 2021
Снимок (commit): Part 6-2. Счётчик количества комментариев индивидуального поста. 
Введены изменения в модель, позволяющие считать количество комментариев поста.
Работа счётчика протестирована.

Промежуток времени на видео: 6:33 - 7:54

-------------------------------------------------------------------
22 сентября 2021
Снимок (commit): Part 6-1. Счётчик количества просмотров индивидуального поста. 
 

Начал работу над последней частью сайта. Решил закончить с этой задачей 
и перейти к следующей работе - завершить построение действующего сайта-блога на 
PythonAnywhere в полном соответствии с данной серией видео (но с некоторыми 
улучшениями, например, внешний вид страницы с результатами поиска). 
Хочу также попробовать сделать свой вариант блога, но это - потом. 

Итак Part 6: от 0:00 до 6:33
Подключение счётчика просмотров статей. Каждый пользователь, открывающий 
индивидуальный пост, добавляет единичку к счётчику просмотров. 

12 сентября 2021

С целью сохранить сделанную работу (без Part 6) по созданию данного сайта-блога 
текущая версия всех файлов была собрана в фолдер c названием : "SRC". Сделано это
в связи с тем, что я ещё не могу полноценно пользоваться GIT, но хочу сохранить
файловую структуру и сами файлы для возможного дальнейшего использования и или 
модификации - замены имеющегося функционала на другой - более удобный или более 
продвинутый. 
----------------------------------------------------------------------------
11 сентября
Снимок (commit): Part 5. Добавлена возможность вносить изменения в пост, 
а также удалять пост. 

Удаление поста нужно делать очень осторожно - процес одноэтапный и,
поэтому, легко перепутать кнопки и, вместо внесения изменений пост может
быть легко удалён. Лучше убрать эту кнопку и удалять пост через админ-сайт.
Или сделать предупреждение как у Corey Schafer.

В процессе была разработки из-за банальной ошибки нижнее подчёркивание,
вместо дефиса чуть не полетела вся работа - уже полез в git, 
чтобы "откатить" назад на предыдущий коммит. Слава богу нашёл ошибку:
никогда не делай нижнее подчёркивание при ссылке на имя файла!

Всё работает в объёме Part 5!

-------------------------------------------------------------------------
10 сентября
Снимок (commit): Part 5. Добавлена возможность создания нового поста из формы PostForm
(для авторизованного пользователя) с использованием редактора tinyMCE (!). 

Создан файл post_create.html. 
Внесены изменения во многие файлы:

 - во views.py добавлены новые функции - "def get_author" и "def post_create";
 - также были сделаны изменения в ссылке на пост в файле index.html;
 - чуть поправлен <div> для категорий в файле blog.html;
 - на навигационной панели (header.html) появилась кнопка "Create".

---------------------------------------------------------------------------------
9 сентября
Снимок (commit): На навигационной панели работает 
поиск по тексту; в img/favicon.ico новая иконка. 

Фрагмент формы поиска из файла "sidebar" был взят за основу для организации
аналогичного поиска из домашней страницы.

Также был заменён неработающий favicon и прописан путь к нему в файле "head.html"
----------------------------------------------------------------------------------
7 сентября
Снимок (commit): На странице post работает форма новых комментариев

Сравнительно сложный и запутанный этап. Задейстованы файлы:

1. models.py (класс - "Comment", c атрибутами - к какому посту комментарий, кто автор, когда
   сделан комментарий; функция модели возвращает имя автора комментария). Интересно также, 
   что models.py, но в другом классе файла - "Post", возвращающего 
   название индивидуального поста, а также дающего "get_absolute_url" ссылку на его 
   представление, появилась функция "get_comments" (через декоратор "@property"), которая 
   "достаёт" все комментарии данного индивидуального поста из базы данных и сортирует их в 
   обратном хронологическом порядке;

2. Не забудьте сделать миграцию и внести в БД тестовые комментарии через админ-сайт;

3. В файле "forms.py" создаётся класс новой формы "CommentForm", в которая наследует класс 
   "Comment" модели. В этой новой форме определяются атрибуты, главным из которых, является 
   "content" - текст нового комментария на странице detail-page: 

4. В представлении (views.py) в метод "рost" загружается форма "CommentForm" и определяется  
   Затем, метод "рost" добавляются новые переменные:

5. Много работы также и в файле post.html.
-----------------------------------------------------------------------------------
7 сентября
Снимок (commit): В post.html добавлен динамический 'sidebar.html' 

До настоящего времени боковая колонка, выделенная в отдельный файл (sidebar.html), 
демонстрировалась без "свежих постов" (latest posts) и (categories). Места, где
они должны были находиться оставались пустыми. В тоже время, часть боковой
колонки, "ответственная" за поиск по словам заголовка и краткого содержания (Search
the blog" работала без проблем.

Дело в том, что "поиск" ведётся через самостоятельную функцию в файле представления
и собственный шаблон: "def search()" и "search.html", соответственно. В тоже время,
функция файла представления "def post()" не содержит переменные (latest posts) и 
(categories), которые, поэтому и не могут быть представлены на странице "post.html".

Выход один - нужно добавить эти переменные и контекст в функцию "def post()" файлах
представления по аналогии с тем, как это было сделано в функции "def blog()" !
------------------------------------------------------------------------------------
6 сентября
Снимок (commit): В post.html добавлены динамические ссылки на предыдущий/последующий посты

Предыдущий/последующий пост может быть выбран в соответствии с несколькими приниципами:
  - создать queryset - например, выбрать одну категорию или, допустим, тэг;
  - просто установить предыдущий и последующий на основе даты создания;
  - создать в модели атрибут предыдущий/последующий пост и выбирать для каждого поста
    таковой в индивидуальном порядке 
В данной работе выбран третий вариант, как самый простой и надёжный.

--------------------------------------------------------------------------------------
6 сентября
Снимок (commit): Представление результатов поиска (search_results.html) в более расширенном виде. 
Подключение редактора текста - tinyMCE - к админ-сайту. Создание нового поста (post/4), 
включая содержание, и динамическое оформление страницы поста (без ссылок на предыдущий и 
последующие посты, без работающих комментариев и без работающей боковой колонки, кроме поиска).

Оставил часть дизайнерского оформления текста поста, с изменением шрифта, картинки и цитаты
для возможного дальнейшего использования.

Задействованные файлы: 
  - search_results.html (новый)
  - blog/settings.py
  - posts/models.py
  - posts/views.py
  - blog/urls.py 
  - forms.py
  - head.html
  - post.html
  - scripts.html
  - github.css (новый)
  - highlight.pack.js (новый)
  

-----------------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "Поиск" (Search)

Осуществляется поиск по словам или тексту, имеющимся в названии или
в кратком содержании (overview) поста. Поиска по категориям и тем более
по этикеткам не проводится. В будущем нужно будет попробовать сделать 
возможность представлять найденные посты в виде списка как в post-list.
(Важно! Добавлено 5 сентября: скорее всего для демонстрации результатов поиска
можно применить для шаблона search.html содержание существующиего шаблона 
blog.html. При этом попробовать использовать собственный side-bar, чтобы 
в нём также могли отразиться результаты поиска.)

Для реализации поиска использован новый шаблон - search.html, а также ещё 
три файла были модифицированы - "views.py", "urls.py" и "sidebar.html".

Важно! Добавлено 5 сентября: Для полноценного поиска в существующем блоге необходимо
правильно использовать краткое содержание поста - в нём должен быть фрагмент,
перечисляющий важные составляющие поста, например: site-type: blog; rich-text editor: tinyMCE; 
view: class-based view; search function: overview end title; и т.п.
-----------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "категории" (Categories)

На боковой колонке (side-bar) демонстрируются индивидуальные категории, 
которые используются в данном блоге, а также количество постов, в 
которых каждая категория была задействована. Ожидается, что возможно 
выведение всех постов с одинаковыми категориями в один post-list, тогда
эта информация станет не просто интересной, но и полезной. 

При добавлении данного функционала были сделаны изменения в двух файлах:
  - в файле-представлении (views.py);
  - в шаблоне, в данном случае в боковой колонке (sidebar.html)

Автор видео не стал делать динамичной информацию по этикеткам (tags), что 
могло бы быть желательным для быстрого поиска нужного поста, однако, надеюсь, 
это будет несложно сделать по аналогии с категориями. Нужно только 
предусмотреть наличие поиска всех постов по этикетке с выводом их в список 
(post_list). Для этой работы можно попробовать использовать ответвление в 
git контроле версий...

--------------------------------------------------------------------------
4 сентября
Снимок (commit): Боковая колонка. Раздел "Последние посты" (Latest Posts)

На боковой колонке (side-bar) демонстрируются последние посты из БД - картинка,
название поста, а также количество просмотров и комментариев. Здесь же 
работают ссылки на индивидуальные посты, с переходом на соответствующую 
страницу (post-detail/<?>), на которой пока остаётся исходная (generic) 
дизайнерская картинка, с жёстко запрограммированными (hard-coded) названием 
и текстом.
---------------------------------------------------------------------------
3 сентября
Снимок (commit): Разбивка списка постов на страницы. 

Для разбивки шаблона на страницы использован дефолтный постраничник (paginator)
Django. Он достаточно прост, требует модификации двух файлов - views.py и
blog.html. В будущем возможно попробовать постраничник от Corey Schafer на 
этом материале.

-----------------------------------------------------------------------------
3 сентября
Снимок (commit): Оформление фрагмента стр. blog.html. Список авторских постов. 
                 Описание в ReadMe.txt 


-----------------------------------------------------------------------------

2 сентября 2021
Снимок (commit): Latest Posts Added to Home Page
Заметки к предыдущим снимкам (commits):

    Чтобы использовать Django для разработки динамического backend'а готового
    дизайнерского макета требуется:

    1. Уметь разбираться в том, какой функционал предусмотрен дизайнером для 
       данного сайта:
        - какие модели необходимо иметь для представления каждой страницы сайта;
          например:
            - для представления шаблона index.html данный сайт использует три модели,
              (из которых две вспомогательные):
                - Author (наследует модель User, существующую в Django по умолчанию);
                - Category;
                - Post;
              а также ещё одну модель "Signup", которая находится в файле другого
              приложения - "Marketing" и служит определённой цели - сбору почты читателя;
            - для представления шаблона blog.html данный сайт использует только три
              модели, без "Signup", однако использует другую функцию представления
              для этого шаблона, с другими переменными и словарём;
        - какие атрибуты (переменные) определить в модели и какие им придать характеристики (Fileds);
        - какие особенности для представления атрибутов модели использованы дизайнером,
          например: 
            если дизайнер предусмотрел, что у каждого поста может быть несколько категорий,
            а у каждой категории может быть несколько постов, то, нужно не только 
            использовать в данном случае атрибут: 
                        categories = models.ManyToManyField(Category) 
            но и понимать, что это как-то должно реализоваться в шаблоне:
                        {% for cat in obj.categories.all %} (index.html);
                        или
                        {% for cat in post.categories.all %} (blog.html)
            или, возможно, и в файле-представлении, как в случае с функцией blog:

                        def blog(request):
                            post_list = Post.objects.all()
                            context = {
                            'post_list': post_list
                        }
                        return render(request, 'blog.html', context)

            которая определяет запрос ко всем объектам Post в переменной post_list
       
       Большим "подспорьем" здесь будет анализ готовых сайтов, работающих на логике 
       Django. 
    
    2. Хорошо понимать каким образом взаимодействуют между собой такие файлы Django как:
        - конкретная модель или несколько моделей в файле models.py;
        - конкретная функция представления шаблона в файле views.py;
        - каждый тэг (DTL-tag) шаблонного языка Django в конкретном шаблоне;
 
